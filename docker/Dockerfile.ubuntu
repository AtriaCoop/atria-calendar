FROM ubuntu:16.04 as builder

ARG user=indy
ENV HOME="/home/$user"
WORKDIR $HOME
RUN mkdir -p .local/bin .local/etc .local/lib

# Install environment
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        automake \
        bison \
        build-essential \
        ca-certificates \
        cmake \
        curl \
        flex \
        git \
        libbz2-dev \
        libffi-dev \
        libgflags-dev \
        libgmp-dev \
        liblz4-dev \
        liblzma-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libreadline-gplv2-dev \
        libsnappy-dev \
        libsqlite3-dev \
        libssl-dev \
        libtool \
        libzmq3-dev \
        pkg-config \
        zlib1g-dev && \
    rm -rf /var/lib/apt/lists/*

ARG nacl_lib_ver=1.0.16

# Build and install libsodium library
RUN curl -o libsodium-${nacl_lib_ver}.tar.gz \
        "https://download.libsodium.org/libsodium/releases/libsodium-${nacl_lib_ver}.tar.gz" && \
    tar xzvf libsodium-${nacl_lib_ver}.tar.gz && \
    cd libsodium-${nacl_lib_ver} && \
    CFLAGS="-Os" ./configure && \
    make install && \
    cd .. && \
    cp -a /usr/local/lib/libsodium.so* "$HOME/.local/lib" && \
    rm -rf libsodium-${nacl_lib_ver}*

ARG pbc_lib_ver=0.5.14

# Build and install pbc library
RUN curl -o pbc-${pbc_lib_ver}.tar.gz \
        "https://mirrors.aliyun.com/macports/distfiles/pbc/pbc-${pbc_lib_ver}.tar.gz" && \
    tar xzvf pbc-${pbc_lib_ver}.tar.gz && \
    cd pbc-${pbc_lib_ver} && \
    ./configure && \
    make install && \
    cd .. && \
    cp /usr/local/lib/libpbc*.so "$HOME/.local/lib" && \
    rm -rf pbc-${pbc_lib_ver}*

ARG rocksdb_lib_ver=5.13.fb

# Build and install rocksdb library
RUN mkdir rocksdb && \
    curl -o rocksdb/rocksdb.tar.gz \
        "https://codeload.github.com/facebook/rocksdb/tar.gz/${rocksdb_lib_ver}" && \
    cd rocksdb && \
    tar xzf rocksdb.tar.gz && \
    cd ./* && \
    CXXFLAGS="-flto -Os -s" PORTABLE=1 make install-shared && \
    cd $HOME && \
    cp -a /usr/local/lib/librocksdb.so* "$HOME/.local/lib" && \
    rm -rf rocksdb

# 3.5.3+ required
ARG python_version=3.5.5

# Install pyenv and python to user home directory
ENV PYENV_ROOT="$HOME/.pyenv"
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
RUN git clone https://github.com/pyenv/pyenv.git "$PYENV_ROOT" && \
    CFLAGS="-O2" pyenv install $python_version && \
    pyenv global $python_version && \
    find "$PYENV_ROOT" -depth \
        \( \
            \( -type d -a \( -name test -o -name tests \) \) \
            -o \
            \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
        \) -exec rm -rf '{}' + && \
    pip install --no-cache-dir --upgrade pip~=9.0.0

# set to --release for smaller, optimized library
ARG indy_build_flags=

ARG indy_sdk_url=https://codeload.github.com/ianco/indy-sdk/tar.gz/3adea712abc98ddbd9e421b3e6ee7824385eb605
ARG indy_crypto_url=https://codeload.github.com/hyperledger/indy-crypto/tar.gz/1675e29a2a5949b44899553d3d128335cf7a61b3

ENV LIBRARY_PATH="$HOME/.local/lib:$LIBRARY_PATH"

# Install rust toolchain and indy-sdk
RUN curl -o rustup https://sh.rustup.rs && \
    chmod +x rustup && \
    ./rustup -y && \
    mkdir indy-sdk indy-crypto

RUN curl -o indy-sdk/indy-sdk.tar.gz "${indy_sdk_url}" && \
    curl -o indy-crypto/indy-crypto.tar.gz "${indy_crypto_url}"

RUN cd indy-sdk && \
    tar xzf indy-sdk.tar.gz && \
    cd */libindy && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/libindy.so "$HOME/.local/lib" && \
    tar czvf python3-indy.tgz -C ../wrappers/python . && \
    pip install --no-cache-dir python3-indy.tgz && \
    cd ../cli && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/indy-cli "$HOME/.local/bin" && \
    cd $HOME/indy-crypto && \
    tar xzf indy-crypto.tar.gz && \
    cd */libindy-crypto && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/libindy_crypto.so "$HOME/.local/lib" && \
    tar czvf indy-crypto.tgz -C ../wrappers/python . && \
    pip install --no-cache-dir indy-crypto.tgz 

# install postgres plug-in
ARG CACHEBUSTPX="1"
RUN cd $HOME/indy-sdk/indy-sdk*/experimental/plugins/postgres_storage && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/libindystrgpostgres.so "$HOME/.local/lib" 

# install vcx-related libraries
RUN cd $HOME/indy-sdk/indy-sdk*/libnullpay && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/libnullpay.so "$HOME/.local/lib" 

ARG CACHEBUSTVCX="1"
RUN cd $HOME/indy-sdk/indy-sdk*/vcx/libvcx && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/libvcx.so "$HOME/.local/lib" 
RUN cd $HOME/indy-sdk/indy-sdk*/vcx/dummy-cloud-agent && \
    $HOME/.cargo/bin/cargo build ${indy_build_flags} && \
    mv target/*/indy-dummy-agent "$HOME/.local/bin" 

# Install indy python libraries and other dependencies
ADD requirements.txt .
ADD requirements-docker.txt .
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r requirements-docker.txt

# remove intermediate sources
RUN cd $HOME && \
    rm -rf .cargo .multirust .profile .rustup rustup indy-sdk indy-crypto

## Start fresh (new image) ##
FROM ubuntu:16.04

ARG uid=1001
ARG user=indy
ARG python_version=3.5.5
ARG tag_name=von-image
ARG tag_version=

ENV HOME="/home/$user" \
    APP_ROOT="$HOME" \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    PIP_NO_CACHE_DIR=off \
    PYTHON_VERSION="$python_version" \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    RUST_LOG=warning \
    SHELL=/bin/bash \
    SUMMARY="von-image including Python $python_version, indy-sdk, and indy-node" \
    DESCRIPTION="von-image provides a consistent base image for running VON python web \
components. Based on Ubuntu xenial, this image includes Python $python_version \
as well as indy-sdk, indy-node, and supporting Python libraries such as von_anchor and didauth."

LABEL summary="$SUMMARY" \
      description="$DESCRIPTION" \
      io.k8s.description="$DESCRIPTION" \
      io.k8s.display-name="von-image $tag_version" \
      name="$tag_name" \
      version="$tag_version" \
      maintainer=""

# Add indy user
RUN useradd -U -ms /bin/bash -u $uid $user

# Install environment
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        apt-transport-https \
        ca-certificates \
        bzip2 \
        curl \
        git \
        libffi6 \
        libgflags2v5 \
        libgmp10 \
        liblz4-1 \
        liblzma5 \
        libncurses5 \
        libncursesw5 \
        libreadline5 \
        libsnappy1v5 \
        libzmq5 \
        net-tools \
        openssl \
        sqlite3 \
        vim-tiny \
        zlib1g && \
    rm -rf /var/lib/apt/lists/* /usr/share/doc/*

WORKDIR $HOME

# Copy build results
COPY --from=builder --chown=indy:indy $HOME .

# COPY --chown=indy:indy bin/ $HOME/.local/bin/
RUN chmod ug+rwx $HOME/.local/bin/*

# Support standard python paths used in scripts
ENV PYENV_ROOT="$HOME/.pyenv"
RUN ln -s "$PYENV_ROOT/shims/python" /usr/bin/python && \
    ln -s "$PYENV_ROOT/shims/python3" /usr/bin/python3 && \
    ln -s "$PYENV_ROOT/shims/pip" /usr/bin/pip && \
    ln -s "$PYENV_ROOT/shims/pip3" /usr/bin/pip3

# Add selected version of python and local bin directories
ENV PATH="$HOME/.local/bin:$HOME/bin:$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"

# Make libraries resolvable by python
ENV LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH"

USER $user

# Create standard directories to allow volume mounting and set permissions
# Note: PIP_NO_CACHE_DIR environment variable should be cleared to allow caching
RUN mkdir -p \
        $HOME/.cache/pip/http \
        $HOME/.indy-cli/networks \
        $HOME/.indy_client/wallet \
        $HOME/ledger/sandbox/data \
        $HOME/log \
    && chmod -R ug+rw \
        $HOME/.cache $HOME/.indy-cli $HOME/.indy_client $HOME/ledger $HOME/log

CMD ["bash"]
