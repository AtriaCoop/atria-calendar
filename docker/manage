#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --rm --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF
    
      Usage: $0 [command] [options]
    
      Commands:
    
      up -  Creates the application containers from the built images
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.  
            By default all containers will be started.
            
      start - Same as up

      up-bcovrin -  Like "up", runs on the bcovrin network.
      start-bcovrin - Same as up-bcovrin

      up-stn -  Like "up", runs on the Sovrin Test Network (STN).
      start-stn - Same as up-stn

      cli - run indy CLI

      django - run python manage.py commands, such as loads_schemas and loads_orgs, and shell

      shell/shell2 - run bash shell

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.
    
      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down
    
EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="wallet-db dummy-cloud-agent indy-django"
STN_CONTAINERS="wallet-db indy-django"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']}
      fi
    done <.env
  fi

  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-indy}"

  export RUST_LOG=${RUST_LOG:-warn}
  export RUST_BACKTRACE=${RUST_BACKTRACE:-full}

  # wallet-db
  export POSTGRESQL_DATABASE="INDY_BASE"
  export POSTGRESQL_USER="DB_USER"
  export POSTGRESQL_PASSWORD="DB_PASSWORD"
  export ENABLE_REALTIME_INDEXING="1"
  export POSTGRESQL_WALLET_HOST="wallet-db"
  export POSTGRESQL_WALLET_PORT="5432"
  export POSTGRESQL_ADMIN_USER="postgres"
  export POSTGRESQL_ADMIN_PASSWORD="mysecretpassword"

  # indy-django
  export APP_FILE=app-vonx.py
  export APP_CONFIG=${APP_CONFIG:-}
  export APP_MODULE=api_indy.tob_anchor.boot:init_app
  export API_HTTP_PORT=${API_HTTP_PORT:-8081}
  export DATABASE_SERVICE_NAME="tob-db"
  export DATABASE_ENGINE="postgresql"
  export DATABASE_NAME=${POSTGRESQL_DATABASE}
  export DATABASE_USER=${POSTGRESQL_USER}
  export DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  export DEBUG=${DEBUG}
  export DEMO_SITE=${DEMO_SITE-True}
  export DJANGO_SECRET_KEY=wpn1GZrouOryH2FshRrpVHcEhMfMLtmTWMC2K5Vhx8MAi74H5y
  export DJANGO_DEBUG=True
  export DJANGO_LOG_LEVEL=${DJANGO_LOG_LEVEL-INFO}
  export OPTIMIZE_TABLE_ROW_COUNTS=${OPTIMIZE_TABLE_ROW_COUNTS-}
  export INDY_DISABLED=${INDY_DISABLED-}
  export SOLR_SERVICE_NAME="tob-solr"
  export SOLR_CORE_NAME=${CORE_NAME}
  export SKIP_INDEXING_ON_STARTUP=${SKIP_INDEXING_ON_STARTUP-}
  export GENESIS_URL=${GENESIS_URL-}
  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export LEDGER_PROTOCOL_VERSION=${LEDGER_PROTOCOL_VERSION-}
  export SQL_DEBUG=${SQL_DEBUG:-}
  export WEB_CONCURRENCY=${WEB_CONCURRENCY:-5}
  export APPLICATION_URL=${APPLICATION_URL-http://localhost:8080}
}

getStartupParams() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

getStartupParamsStn() {
  CONTAINERS=""
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$STN_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

getStartupParamsCli() {
  ARGS="--force-recreate"

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS} 
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker-compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../tob-web/.cache
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start|up)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-bcovrin|up-bcovrin)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose -f docker-compose-bcovrin.yml up -d ${_startupParams} 
  docker-compose logs -f
 ;;
start-stn|up-stn)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose -f docker-compose-stn.yml up -d ${_startupParams} 
  docker-compose logs -f
 ;;
logs)
  configureEnvironment $@
  docker-compose logs -f
  ;;
stop)
  configureEnvironment
  docker-compose stop 
  ;;
rm|down)
  configureEnvironment
  deleteVolumes
  ;;
shell)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose run indy-shell bash
  ;;
shell2)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose run indy-shell2 bash
  ;;
cli)
  _startupParams=$(getStartupParamsCli $@)
  configureEnvironment $@
  docker-compose run indy-cli 
  ;;
django)
  _startupParams=$(getStartupParams $@)
  configureEnvironment $@
  docker-compose run -w /home/indy/indy_community_demo/indy_community_demo indy-django python manage.py $@
  ;;
*)
  usage
  ;;
esac

popd >/dev/null
